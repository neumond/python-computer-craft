R1474:0[5]{:[1]<9>rednet.py:[0]<2>py}<9>rednet.py<1425>from cc import LuaException, import_file, os, rednet, parallel

_lib = import_file('_lib.py', __file__)
step, assert_raises = _lib.step, _lib.assert_raises

side = 'back'

step(f'Attach modem to {side} side of computer')

assert rednet.close() is None

assert rednet.isOpen(side) is False
assert rednet.isOpen() is False

with assert_raises(LuaException):
    rednet.close('doesnotexist')

assert rednet.close(side) is None

with assert_raises(LuaException):
    rednet.open('doesnotexist')

assert rednet.open(side) is None
assert rednet.isOpen(side) is True

with assert_raises(LuaException):
    # disallowed hostname
    rednet.host('helloproto', 'localhost')
assert rednet.host('helloproto', 'alpha') is None

cid = os.getComputerID()

assert rednet.lookup('helloproto', 'localhost') == cid
assert rednet.lookup('helloproto') == [cid]
assert rednet.lookup('nonexistent', 'localhost') is None
assert rednet.lookup('nonexistent') == []

assert rednet.unhost('helloproto') is None

assert rednet.send(cid + 100, b'message', 'anyproto') is True
assert rednet.broadcast(b'message', 'anyproto') is None

assert rednet.receive(timeout=1) is None


def _send():
    assert rednet.send(cid, b'message') is True


def _recv():
    assert rednet.receive(timeout=1) == (cid, b'message', None)


parallel.waitForAll(_send, _recv)

assert rednet.close() is None
assert rednet.isOpen(side) is False

print('Test finished successfully')
S257:T<1>1<215>local p, rel = ...
if rel ~= nil then
p = fs.combine(fs.getDir(rel), p)
end
if not fs.exists(p) then return nil end
if fs.isDir(p) then return nil end
f = fs.open(p, "r")
local src = f.readAll()
f.close()
return src{:[1]<7>_lib.py:[2]<9>rednet.py}
R1162:T<1>1<1151>{:[1]T:[2]<1134>from contextlib import contextmanager
from cc import os


@contextmanager
def assert_raises(etype, message=None):
    try:
        yield
    except Exception as e:
        assert isinstance(e, etype), repr(e)
        if message is not None:
            assert e.args == (message, )
    else:
        raise AssertionError(f'Exception of type {etype} was not raised')


@contextmanager
def assert_takes_time(at_least, at_most):
    t = os.epoch('utc') / 1000
    yield
    dt = os.epoch('utc') / 1000 - t
    # print(at_least, '<=', dt, '<=', at_most)
    assert at_least <= dt <= at_most


class AnyInstanceOf:
    def __init__(self, cls):
        self.c = cls

    def __eq__(self, other):
        return isinstance(other, self.c)


def step(text):
    input(f'{text} [enter]')


def term_step(text):
    from cc import colors, term

    for color in colors.iter_colors():
        r, g, b = term.nativePaletteColor(color)
        term.setPaletteColor(color, r, g, b)
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setCursorBlink(True)
    step(text)}
S77:T<1>1<13>io.write(...){:[1]<45>Attach modem to back side of computer [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S32:T<1>1<16>G:rednet:M:close{:[1]N}
R15:T<1>1<7>{:[1]T}
S39:T<1>1<17>G:rednet:M:isOpen{:[1]<4>back}
R21:T<1>1<12>{:[1]T:[2]F}
S33:T<1>1<17>G:rednet:M:isOpen{:[1]N}
R21:T<1>1<12>{:[1]T:[2]F}
S47:T<1>1<16>G:rednet:M:close{:[1]<12>doesnotexist}
R51:T<1>1<42>{:[1]F:[2]<27>No such modem: doesnotexist}
S38:T<1>1<16>G:rednet:M:close{:[1]<4>back}
R15:T<1>1<7>{:[1]T}
S46:T<1>1<15>G:rednet:M:open{:[1]<12>doesnotexist}
R51:T<1>1<42>{:[1]F:[2]<27>No such modem: doesnotexist}
S37:T<1>1<15>G:rednet:M:open{:[1]<4>back}
R15:T<1>1<7>{:[1]T}
S39:T<1>1<17>G:rednet:M:isOpen{:[1]<4>back}
R21:T<1>1<12>{:[1]T:[2]T}
S60:T<1>1<15>G:rednet:M:host{:[1]<10>helloproto:[2]<9>localhost}
R41:T<1>1<32>{:[1]F:[2]<17>Reserved hostname}
S56:T<1>1<15>G:rednet:M:host{:[1]<10>helloproto:[2]<5>alpha}
R15:T<1>1<7>{:[1]T}
S31:T<1>1<20>G:os:M:getComputerID{}
R23:T<1>1<14>{:[1]T:[2][1]}
S62:T<1>1<17>G:rednet:M:lookup{:[1]<10>helloproto:[2]<9>localhost}
R23:T<1>1<14>{:[1]T:[2][1]}
S51:T<1>1<17>G:rednet:M:lookup{:[1]<10>helloproto:[2]N}
R23:T<1>1<14>{:[1]T:[2][1]}
S63:T<1>1<17>G:rednet:M:lookup{:[1]<11>nonexistent:[2]<9>localhost}
R15:T<1>1<7>{:[1]T}
S52:T<1>1<17>G:rednet:M:lookup{:[1]<11>nonexistent:[2]N}
R15:T<1>1<7>{:[1]T}
S46:T<1>1<17>G:rednet:M:unhost{:[1]<10>helloproto}
R15:T<1>1<7>{:[1]T}
S64:T<1>1<15>G:rednet:M:send{:[1][101]:[2]<7>message:[3]<8>anyproto}
R21:T<1>1<12>{:[1]T:[2]T}
S60:T<1>1<20>G:rednet:M:broadcast{:[1]<7>message:[2]<8>anyproto}
R15:T<1>1<7>{:[1]T}
S41:T<1>1<18>G:rednet:M:receive{:[1]N:[2][1]}
R15:T<1>1<7>{:[1]T}
S52:T<1>2<15>G:rednet:M:send{:[1][1]:[2]<7>message:[3]N}
S41:T<1>3<18>G:rednet:M:receive{:[1]N:[2][1]}
R21:T<1>2<12>{:[1]T:[2]T}
R37:T<1>3<28>{:[1]T:[2][1]:[3]<7>message}
S5:D<1>3
S32:T<1>1<16>G:rednet:M:close{:[1]N}
R15:T<1>1<7>{:[1]T}
S39:T<1>1<17>G:rednet:M:isOpen{:[1]<4>back}
R21:T<1>1<12>{:[1]T:[2]F}
S58:T<1>1<13>io.write(...){:[1]<26>Test finished successfully}
R15:T<1>1<7>{:[1]T}
S32:T<1>1<13>io.write(...){:[1]<1>
}
R15:T<1>1<7>{:[1]T}
S2:CN
