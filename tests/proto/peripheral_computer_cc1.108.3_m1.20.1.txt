R970:0[5]{:[1]<22>peripheral_computer.py:[0]<2>py}<22>peripheral_computer.py<894>from cc import import_file, peripheral

_lib = import_file('_lib.py', __file__)


def computer_peri(place_thing, thing, finish):
    side = 'left'

    _lib.step(
        f'Place {place_thing} on {side} side of computer\n'
        "Don't turn it on!",
    )

    c = peripheral.wrap(side)
    assert c is not None

    assert c.isOn() is False
    assert isinstance(c.getID(), int)
    assert c.getLabel() is None
    assert c.turnOn() is None

    _lib.step(f'{thing.capitalize()} must be turned on now')

    assert c.shutdown() is None

    _lib.step(f'{thing.capitalize()} must shutdown')

    _lib.step(f'Now turn on {thing} manually and enter some commands')

    assert c.reboot() is None

    _lib.step(f'{thing.capitalize()} must reboot')

    print(f'Test {finish} finished successfully')


computer_peri('another computer', 'computer', '1/2')
computer_peri('turtle', 'turtle', '2/2')
S271:T<1>1<215>local p, rel = ...
if rel ~= nil then
p = fs.combine(fs.getDir(rel), p)
end
if not fs.exists(p) then return nil end
if fs.isDir(p) then return nil end
f = fs.open(p, "r")
local src = f.readAll()
f.close()
return src{:[1]<7>_lib.py:[2]<22>peripheral_computer.py}
R1162:T<1>1<1151>{:[1]T:[2]<1134>from contextlib import contextmanager
from cc import os


@contextmanager
def assert_raises(etype, message=None):
    try:
        yield
    except Exception as e:
        assert isinstance(e, etype), repr(e)
        if message is not None:
            assert e.args == (message, )
    else:
        raise AssertionError(f'Exception of type {etype} was not raised')


@contextmanager
def assert_takes_time(at_least, at_most):
    t = os.epoch('utc') / 1000
    yield
    dt = os.epoch('utc') / 1000 - t
    # print(at_least, '<=', dt, '<=', at_most)
    assert at_least <= dt <= at_most


class AnyInstanceOf:
    def __init__(self, cls):
        self.c = cls

    def __eq__(self, other):
        return isinstance(other, self.c)


def step(text):
    input(f'{text} [enter]')


def term_step(text):
    from cc import colors, term

    for color in colors.iter_colors():
        r, g, b = term.nativePaletteColor(color)
        term.setPaletteColor(color, r, g, b)
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setCursorBlink(True)
    step(text)}
S105:T<1>1<13>io.write(...){:[1]<73>Place another computer on left side of computer
Don't turn it on! [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S44:T<1>1<22>G:peripheral:M:getType{:[1]<4>left}
R31:T<1>1<22>{:[1]T:[2]<8>computer}
S52:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<4>isOn}
R21:T<1>1<12>{:[1]T:[2]F}
S53:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<5>getID}
R24:T<1>1<15>{:[1]T:[2][-1]}
S56:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<8>getLabel}
R15:T<1>1<7>{:[1]T}
S54:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<6>turnOn}
R15:T<1>1<7>{:[1]T}
S70:T<1>1<13>io.write(...){:[1]<38>Computer must be turned on now [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S56:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<8>shutdown}
R15:T<1>1<7>{:[1]T}
S62:T<1>1<13>io.write(...){:[1]<30>Computer must shutdown [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S93:T<1>1<13>io.write(...){:[1]<61>Now turn on computer manually and enter some commands [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S54:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<6>reboot}
R15:T<1>1<7>{:[1]T}
S60:T<1>1<13>io.write(...){:[1]<28>Computer must reboot [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S62:T<1>1<13>io.write(...){:[1]<30>Test 1/2 finished successfully}
R15:T<1>1<7>{:[1]T}
S32:T<1>1<13>io.write(...){:[1]<1>
}
R15:T<1>1<7>{:[1]T}
S95:T<1>1<13>io.write(...){:[1]<63>Place turtle on left side of computer
Don't turn it on! [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S44:T<1>1<22>G:peripheral:M:getType{:[1]<4>left}
R29:T<1>1<20>{:[1]T:[2]<6>turtle}
S52:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<4>isOn}
R21:T<1>1<12>{:[1]T:[2]F}
S53:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<5>getID}
R23:T<1>1<14>{:[1]T:[2][0]}
S56:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<8>getLabel}
R15:T<1>1<7>{:[1]T}
S54:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<6>turnOn}
R15:T<1>1<7>{:[1]T}
S68:T<1>1<13>io.write(...){:[1]<36>Turtle must be turned on now [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S56:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<8>shutdown}
R15:T<1>1<7>{:[1]T}
S60:T<1>1<13>io.write(...){:[1]<28>Turtle must shutdown [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S91:T<1>1<13>io.write(...){:[1]<59>Now turn on turtle manually and enter some commands [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S54:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<6>reboot}
R15:T<1>1<7>{:[1]T}
S58:T<1>1<13>io.write(...){:[1]<26>Turtle must reboot [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S62:T<1>1<13>io.write(...){:[1]<30>Test 2/2 finished successfully}
R15:T<1>1<7>{:[1]T}
S32:T<1>1<13>io.write(...){:[1]<1>
}
R15:T<1>1<7>{:[1]T}
S2:CN
