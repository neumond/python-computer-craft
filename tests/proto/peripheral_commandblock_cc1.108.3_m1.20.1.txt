R777:0[5]{:[1]<26>peripheral_commandblock.py:[0]<2>py}<26>peripheral_commandblock.py<693>from cc import LuaException, import_file, peripheral

_lib = import_file('_lib.py', __file__)

side = 'left'

_lib.step(f'Attach command block at {side} side of computer')

m = peripheral.wrap(side)

assert m.getCommand() == ''
assert m.setCommand('say Hello from python side') is None
assert m.getCommand() == 'say Hello from python side'
assert m.runCommand() is None

assert m.setCommand('time query daytime') is None
assert m.getCommand() == 'time query daytime'
assert m.runCommand() is None

assert m.setCommand('') is None
assert m.getCommand() == ''
with _lib.assert_raises(LuaException):
    m.runCommand()

print('You must have seen chat message')
print('Test finished successfully')
S275:T<1>1<215>local p, rel = ...
if rel ~= nil then
p = fs.combine(fs.getDir(rel), p)
end
if not fs.exists(p) then return nil end
if fs.isDir(p) then return nil end
f = fs.open(p, "r")
local src = f.readAll()
f.close()
return src{:[1]<7>_lib.py:[2]<26>peripheral_commandblock.py}
R1870:T<1>1<1859>{:[1]T:[2]<1842>from contextlib import contextmanager
from cc import os


@contextmanager
def assert_raises(etype, message=None):
    try:
        yield
    except Exception as e:
        assert isinstance(e, etype), repr(e)
        if message is not None:
            assert e.args == (message, )
    else:
        raise AssertionError(f'Exception of type {etype} was not raised')


@contextmanager
def assert_takes_time(at_least, at_most):
    t = os.epoch('utc') / 1000
    yield
    dt = os.epoch('utc') / 1000 - t
    # print(at_least, '<=', dt, '<=', at_most)
    assert at_least <= dt <= at_most


class AnyInstanceOf:
    def __init__(self, cls):
        self.c = cls

    def __eq__(self, other):
        return isinstance(other, self.c)


def step(text):
    input(f'{text} [enter]')


def term_step(text):
    from cc import colors, term

    for color in colors.iter_colors():
        r, g, b = term.nativePaletteColor(color)
        term.setPaletteColor(color, r, g, b)
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
    term.setCursorBlink(True)
    step(text)


def _computer_peri(place_thing, thing):
    from cc import peripheral

    side = 'left'

    step(
        f'Place {place_thing} on {side} side of computer\n'
        "Don't turn it on!",
    )

    c = peripheral.wrap(side)
    assert c is not None

    assert c.isOn() is False
    assert isinstance(c.getID(), int)
    assert c.getLabel() is None
    assert c.turnOn() is None

    step(f'{thing.capitalize()} must be turned on now')

    assert c.shutdown() is None

    step(f'{thing.capitalize()} must shutdown')

    step(f'Now turn on {thing} manually and enter some commands')

    assert c.reboot() is None

    step(f'{thing.capitalize()} must reboot')

    print('Test finished successfully')}
S85:T<1>1<13>io.write(...){:[1]<53>Attach command block at left side of computer [enter]}
R15:T<1>1<7>{:[1]T}
S22:T<1>1<11>G:io:M:read{}
R23:T<1>1<14>{:[1]T:[2]<0>}
S44:T<1>1<22>G:peripheral:M:getType{:[1]<4>left}
R30:T<1>1<21>{:[1]T:[2]<7>command}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>getCommand}
R23:T<1>1<14>{:[1]T:[2]<0>}
S93:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>setCommand:[3]<26>say Hello from python side}
R15:T<1>1<7>{:[1]T}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>getCommand}
R50:T<1>1<41>{:[1]T:[2]<26>say Hello from python side}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>runCommand}
R21:T<1>1<12>{:[1]T:[2]T}
S85:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>setCommand:[3]<18>time query daytime}
R15:T<1>1<7>{:[1]T}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>getCommand}
R42:T<1>1<33>{:[1]T:[2]<18>time query daytime}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>runCommand}
R21:T<1>1<12>{:[1]T:[2]T}
S66:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>setCommand:[3]<0>}
R15:T<1>1<7>{:[1]T}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>getCommand}
R23:T<1>1<14>{:[1]T:[2]<0>}
S59:T<1>1<19>G:peripheral:M:call{:[1]<4>left:[2]<10>runCommand}
R43:T<1>1<34>{:[1]T:[2]F:[3]<14>Command failed}
S63:T<1>1<13>io.write(...){:[1]<31>You must have seen chat message}
R15:T<1>1<7>{:[1]T}
S32:T<1>1<13>io.write(...){:[1]<1>
}
R15:T<1>1<7>{:[1]T}
S58:T<1>1<13>io.write(...){:[1]<26>Test finished successfully}
R15:T<1>1<7>{:[1]T}
S32:T<1>1<13>io.write(...){:[1]<1>
}
R15:T<1>1<7>{:[1]T}
S2:CN
